name: CICD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [synchronize]  # Se déclenche uniquement quand des commits sont ajoutés à la PR

jobs:
  sonar-analyze:
    name: Build and analyze
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.112'
  
    - name: Start SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"Lingatsu_MSPR814_API_Produits" /o:"lingatsu" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.cobertura.xml" /d:sonar.verbose=true /d:sonar.scanner.scanAll=false
  
    - name: Restore dependencies
      run: dotnet restore ProductApi/ProductApi.sln

    - name: Build solution
      run: dotnet build ProductApi/ProductApi.sln --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test ProductApi.Tests/ProductApi.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.cobertura.xml

    - name: List files in TestResults
      run: |
        ls -R TestResults

    - name: Final SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
     
  # docker-build-and-push:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: sonar-analyze
  #   steps:
  #     - name: Checkout du repo
  #       uses: actions/checkout@v4

  #     - name: Se connecter à Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Construire l'image Docker
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/product-api:${{ github.sha }} -t ${{ secrets.DOCKER_USERNAME }}/product-api:latest -f ./dockerfile .

  #     - name: Pousser l'image Docker
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/product-api:${{ github.sha }}
  #         docker push ${{ secrets.DOCKER_USERNAME }}/product-api:latest
