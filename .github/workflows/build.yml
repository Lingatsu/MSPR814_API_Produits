name: CICD
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-analyze:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' 

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Clean project
        run: dotnet clean

      - name: Restore dependencies
        run: dotnet restore

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Start SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Lingatsu_MSPR814_API_Produits" /o:"lingatsu" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=true /d:sonar.cs.vscoveragexml.reportsPaths="TestResults/coverage.cobertura.xml"

      - name: Build solution
        run: dotnet build --no-incremental

      - name: Run tests with coverage
        run: |
          dotnet test ../ProductApi.Tests/ProductApi.Tests.csproj --collect:"XPlat Code Coverage" --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.cobertura.xml

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

          
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: sonar-analyze  # Cette job ne démarre qu'après l'analyse SonarQube réussie
    steps:
      # 1. Checkout du repo
      - name: Checkout du repo
        uses: actions/checkout@v3

      # 2. Se connecter à Docker Hub
      - name: Se connecter à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      # 3. Construire l'image Docker avec commit SHA comme tag
      - name: Construire l'image Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-api:${{ github.sha }} -t ${{ secrets.DOCKER_USERNAME }}/product-api:latest .

      # 4. Pousser l'image Docker vers Docker Hub
      - name: Pousser l'image Docker
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/product-api:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/product-api:latest